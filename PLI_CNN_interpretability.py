import numpy as npimport tensorflow as tffrom tensorflow.keras.models import Modelfrom tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Denseimport matplotlib.pyplot as plt# Define the PLI model based on the figuredef pli_model(input_shape=(224, 224, 3)):    # Input Stage    inputs = Input(shape=input_shape)        # Normalization    x = tf.keras.layers.experimental.preprocessing.Rescaling(1./255)(inputs)        # Convolutional Layers (Feature Extraction)    x = Conv2D(32, (3, 3), activation='relu', padding='same', name='conv1')(x)    x = Conv2D(64, (3, 3), activation='relu', padding='same', name='conv2')(x)        # Pooling Layer (Max Pooling)    x = MaxPooling2D(pool_size=(2, 2), name='pool1')(x)        # Fuzzification Layer (Trapezoidal Membership Function - Simulated as dense layers for simplicity)    x = Flatten()(x)    x = Dense(128, activation='relu', name='dense1')(x)        # Training Analysis (Membership Aggregation)    # Here we simulate membership aggregation with a dense layer    x = Dense(64, activation='relu', name='dense2')(x)        # Query Image Analysis (Simulating with another dense layer)    query_analysis = Dense(32, activation='relu', name='query_analysis')(x)        # Fuzzy Inference System (Rule-Based Classification - Simulated as dense layers)    fuzzy_inference = Dense(16, activation='relu', name='fuzzy_inference')(query_analysis)        # Defuzzification (Final Classification)    defuzzification = Dense(1, activation='sigmoid', name='output')(fuzzy_inference)        # Heatmap Generation - This will be visualized separately, not part of the Keras model        # Define the model    model = Model(inputs=inputs, outputs=defuzzification, name='PLI_Model')    return model# Example usagemodel = pli_model()model.summary()# Simulated heatmap generation (for illustration purposes)def generate_heatmap(model, img_array):    # Assuming the heatmap is based on the final convolutional output    heatmap = np.mean(img_array, axis=-1)    heatmap = np.maximum(heatmap, 0) / np.max(heatmap)    return heatmap# Display heatmapdef display_heatmap(heatmap, img_array):    plt.imshow(img_array[0])    plt.imshow(heatmap, cmap='jet', alpha=0.5)    plt.colorbar()    plt.show()# Simulate input data (as example)input_image = np.random.random((1, 224, 224, 3))heatmap = generate_heatmap(model, input_image)display_heatmap(heatmap, input_image)